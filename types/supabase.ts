/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/email_addresses": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.email_addresses.id"];
          created_at?: parameters["rowFilter.email_addresses.created_at"];
          user_id?: parameters["rowFilter.email_addresses.user_id"];
          email_address?: parameters["rowFilter.email_addresses.email_address"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["email_addresses"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** email_addresses */
          email_addresses?: definitions["email_addresses"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.email_addresses.id"];
          created_at?: parameters["rowFilter.email_addresses.created_at"];
          user_id?: parameters["rowFilter.email_addresses.user_id"];
          email_address?: parameters["rowFilter.email_addresses.email_address"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.email_addresses.id"];
          created_at?: parameters["rowFilter.email_addresses.created_at"];
          user_id?: parameters["rowFilter.email_addresses.user_id"];
          email_address?: parameters["rowFilter.email_addresses.email_address"];
        };
        body: {
          /** email_addresses */
          email_addresses?: definitions["email_addresses"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/friend_requests": {
    get: {
      parameters: {
        query: {
          requestor?: parameters["rowFilter.friend_requests.requestor"];
          receiver?: parameters["rowFilter.friend_requests.receiver"];
          created_at?: parameters["rowFilter.friend_requests.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["friend_requests"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** friend_requests */
          friend_requests?: definitions["friend_requests"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          requestor?: parameters["rowFilter.friend_requests.requestor"];
          receiver?: parameters["rowFilter.friend_requests.receiver"];
          created_at?: parameters["rowFilter.friend_requests.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          requestor?: parameters["rowFilter.friend_requests.requestor"];
          receiver?: parameters["rowFilter.friend_requests.receiver"];
          created_at?: parameters["rowFilter.friend_requests.created_at"];
        };
        body: {
          /** friend_requests */
          friend_requests?: definitions["friend_requests"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/friends_list": {
    get: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.friends_list.created_at"];
          friend_requestor?: parameters["rowFilter.friends_list.friend_requestor"];
          friend_receiver?: parameters["rowFilter.friends_list.friend_receiver"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["friends_list"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** friends_list */
          friends_list?: definitions["friends_list"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.friends_list.created_at"];
          friend_requestor?: parameters["rowFilter.friends_list.friend_requestor"];
          friend_receiver?: parameters["rowFilter.friends_list.friend_receiver"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          created_at?: parameters["rowFilter.friends_list.created_at"];
          friend_requestor?: parameters["rowFilter.friends_list.friend_requestor"];
          friend_receiver?: parameters["rowFilter.friends_list.friend_receiver"];
        };
        body: {
          /** friends_list */
          friends_list?: definitions["friends_list"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/phone_numbers": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.phone_numbers.id"];
          created_at?: parameters["rowFilter.phone_numbers.created_at"];
          user_id?: parameters["rowFilter.phone_numbers.user_id"];
          phone_number?: parameters["rowFilter.phone_numbers.phone_number"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["phone_numbers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** phone_numbers */
          phone_numbers?: definitions["phone_numbers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.phone_numbers.id"];
          created_at?: parameters["rowFilter.phone_numbers.created_at"];
          user_id?: parameters["rowFilter.phone_numbers.user_id"];
          phone_number?: parameters["rowFilter.phone_numbers.phone_number"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.phone_numbers.id"];
          created_at?: parameters["rowFilter.phone_numbers.created_at"];
          user_id?: parameters["rowFilter.phone_numbers.user_id"];
          phone_number?: parameters["rowFilter.phone_numbers.phone_number"];
        };
        body: {
          /** phone_numbers */
          phone_numbers?: definitions["phone_numbers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/user_profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_profiles.id"];
          created_at?: parameters["rowFilter.user_profiles.created_at"];
          user_id?: parameters["rowFilter.user_profiles.user_id"];
          user_name?: parameters["rowFilter.user_profiles.user_name"];
          avatar_url?: parameters["rowFilter.user_profiles.avatar_url"];
          profile_hash?: parameters["rowFilter.user_profiles.profile_hash"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["user_profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user_profiles */
          user_profiles?: definitions["user_profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_profiles.id"];
          created_at?: parameters["rowFilter.user_profiles.created_at"];
          user_id?: parameters["rowFilter.user_profiles.user_id"];
          user_name?: parameters["rowFilter.user_profiles.user_name"];
          avatar_url?: parameters["rowFilter.user_profiles.avatar_url"];
          profile_hash?: parameters["rowFilter.user_profiles.profile_hash"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.user_profiles.id"];
          created_at?: parameters["rowFilter.user_profiles.created_at"];
          user_id?: parameters["rowFilter.user_profiles.user_id"];
          user_name?: parameters["rowFilter.user_profiles.user_name"];
          avatar_url?: parameters["rowFilter.user_profiles.avatar_url"];
          profile_hash?: parameters["rowFilter.user_profiles.profile_hash"];
        };
        body: {
          /** user_profiles */
          user_profiles?: definitions["user_profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/get_id": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/deny_friend_request": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: bigint */
            request_sender: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/get_user_profile_id": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/are_pending_friends": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: bigint */
            target: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/get_users": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            query: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/are_friends": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: bigint */
            target: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/approve_friend_request": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: bigint */
            request_sender: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/get_friend_list": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  /** @description Users email addresses */
  email_addresses: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: uuid */
    user_id: string;
    /** Format: text */
    email_address: string;
  };
  friend_requests: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `user_profiles.id`.<fk table='user_profiles' column='id'/>
     */
    requestor: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `user_profiles.id`.<fk table='user_profiles' column='id'/>
     */
    receiver: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
  };
  friends_list: {
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `user_profiles.id`.<fk table='user_profiles' column='id'/>
     */
    friend_requestor: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `user_profiles.id`.<fk table='user_profiles' column='id'/>
     */
    friend_receiver: number;
  };
  /** @description Users phone numbers */
  phone_numbers: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: uuid */
    user_id: string;
    /** Format: text */
    phone_number: string;
  };
  /** @description User Profiles */
  user_profiles: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: uuid */
    user_id: string;
    /** Format: text */
    user_name?: string;
    /** Format: text */
    avatar_url?: string;
    /** Format: text */
    profile_hash: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description email_addresses */
  "body.email_addresses": definitions["email_addresses"];
  /** Format: bigint */
  "rowFilter.email_addresses.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.email_addresses.created_at": string;
  /** Format: uuid */
  "rowFilter.email_addresses.user_id": string;
  /** Format: text */
  "rowFilter.email_addresses.email_address": string;
  /** @description friend_requests */
  "body.friend_requests": definitions["friend_requests"];
  /** Format: bigint */
  "rowFilter.friend_requests.requestor": string;
  /** Format: bigint */
  "rowFilter.friend_requests.receiver": string;
  /** Format: timestamp with time zone */
  "rowFilter.friend_requests.created_at": string;
  /** @description friends_list */
  "body.friends_list": definitions["friends_list"];
  /** Format: timestamp with time zone */
  "rowFilter.friends_list.created_at": string;
  /** Format: bigint */
  "rowFilter.friends_list.friend_requestor": string;
  /** Format: bigint */
  "rowFilter.friends_list.friend_receiver": string;
  /** @description phone_numbers */
  "body.phone_numbers": definitions["phone_numbers"];
  /** Format: bigint */
  "rowFilter.phone_numbers.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.phone_numbers.created_at": string;
  /** Format: uuid */
  "rowFilter.phone_numbers.user_id": string;
  /** Format: text */
  "rowFilter.phone_numbers.phone_number": string;
  /** @description user_profiles */
  "body.user_profiles": definitions["user_profiles"];
  /** Format: bigint */
  "rowFilter.user_profiles.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.user_profiles.created_at": string;
  /** Format: uuid */
  "rowFilter.user_profiles.user_id": string;
  /** Format: text */
  "rowFilter.user_profiles.user_name": string;
  /** Format: text */
  "rowFilter.user_profiles.avatar_url": string;
  /** Format: text */
  "rowFilter.user_profiles.profile_hash": string;
}

export interface operations {}

export interface external {}
